name: "Clear Var Cache"

on:
  workflow_dispatch:
    inputs:
      infra_env:
        type: choice
        description: 'Select Subscription'
        options:
          - 'Sandbox-01'
          - 'Sandbox-02'
          - 'mcd-corp-nonprod'
          - 'mcd-corp-prod'
          
      resource_group_name:
        description: "Resource Group Name"
        required: true

      server_name:
        description: "Virtual Machine Name"
        required: true
      
jobs:
  ClearVarCache_Review:
    name: "ClearVarCache_Review"
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: "Setting Environment"
        env:
          DEV: ${{ contains(github.event.inputs.infra_env, 'Sandbox-01') }}
          SANDBOX: ${{ contains(github.event.inputs.infra_env, 'Sandbox-02') }}
        run: |
          if ${DEV} == true; then
            echo "ARM_CLIENT_ID=${{secrets.CEQ_AZURE_SANDBOX_TF_ARM_CLIENT_ID}}" >> $GITHUB_ENV
            echo "ARM_CLIENT_SECRET=${{secrets.CEQ_AZURE_SANDBOX_TF_ARM_CLIENT_SECRET}}" >> $GITHUB_ENV
            echo "ARM_SUBSCRIPTION_ID=${{secrets.CEQ_AZURE_SANDBOX_TF_ARM_SUBS_ID}}" >> $GITHUB_ENV
            echo "ARM_TENANT_ID=${{secrets.CEQ_AZURE_SANDBOX_TF_ARM_TENANT_ID}}" >> $GITHUB_ENV
            echo "TFSTATE_RG=cloudeq" >> $GITHUB_ENV
            echo "TFSTATE_STORAGE_ACCOUNT=ceqstoragecd02" >> $GITHUB_ENV
            echo "TFSTATE_CONTAINER=tfstate" >> $GITHUB_ENV
            echo "ENV=Sandbox-01" >> $GITHUB_ENV
          elif ${SANDBOX} == true;
            then
              echo "ARM_CLIENT_ID=${{secrets.CEQ_AZURE_SANDBOX2_TF_ARM_CLIENT_ID}}" >> $GITHUB_ENV
              echo "ARM_CLIENT_SECRET=${{secrets.CEQ_AZURE_SANDBOX2_TF_ARM_CLIENT_SECRET}}" >> $GITHUB_ENV
              echo "ARM_SUBSCRIPTION_ID=${{secrets.CEQ_AZURE_SANDBOX2_TF_ARM_SUBS_ID}}" >> $GITHUB_ENV
              echo "ARM_TENANT_ID=${{secrets.CEQ_AZURE_SANDBOX2_TF_ARM_TENANT_ID}}" >> $GITHUB_ENV
              echo "TFSTATE_RG=cloudeq" >> $GITHUB_ENV
              echo "TFSTATE_STORAGE_ACCOUNT=ceqstoragecd02" >> $GITHUB_ENV
              echo "TFSTATE_CONTAINER=tfstate" >> $GITHUB_ENV
              echo "ENV=Sandbox-02" >> $GITHUB_ENV
          else
            echo "environment not supported"
            exit 1
          fi

      - name: Plan Review Step
        env:
          RgName: ${{ github.event.inputs.resource_group_name }}
          VmName: ${{ github.event.inputs.vm_name }}
        run: |
          echo "Cache memory in /var folder in server/ virtual machine '${{ inputs.server_name}}' in the resource group '${{ inputs.resource_group_name }}' is being cleared."

  ClearVarCache_Script:
    name: "ClearVarCache_Script"
    runs-on: ubuntu-latest
    needs: ["ClearVarCache_Review"]

    # environment:
    #   name: Deployment_Review

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: "Setting Environment"
        env:
          DEV: ${{ contains(github.event.inputs.infra_env, 'Sandbox-01') }}
          SANDBOX: ${{ contains(github.event.inputs.infra_env, 'Sandbox-02') }}
        run: |
          if ${DEV} == true; then
            echo "ARM_CLIENT_ID=${{secrets.CEQ_AZURE_SANDBOX_TF_ARM_CLIENT_ID}}" >> $GITHUB_ENV
            echo "ARM_CLIENT_SECRET=${{secrets.CEQ_AZURE_SANDBOX_TF_ARM_CLIENT_SECRET}}" >> $GITHUB_ENV
            echo "ARM_SUBSCRIPTION_ID=${{secrets.CEQ_AZURE_SANDBOX_TF_ARM_SUBS_ID}}" >> $GITHUB_ENV
            echo "ARM_TENANT_ID=${{secrets.CEQ_AZURE_SANDBOX_TF_ARM_TENANT_ID}}" >> $GITHUB_ENV
            echo "TFSTATE_RG=cloudeq" >> $GITHUB_ENV
            echo "TFSTATE_STORAGE_ACCOUNT=ceqstoragecd02" >> $GITHUB_ENV
            echo "TFSTATE_CONTAINER=tfstate" >> $GITHUB_ENV
            echo "ENV=Sandbox-01" >> $GITHUB_ENV
          elif ${SANDBOX} == true;
            then
              echo "ARM_CLIENT_ID=${{secrets.CEQ_AZURE_SANDBOX2_TF_ARM_CLIENT_ID}}" >> $GITHUB_ENV
              echo "ARM_CLIENT_SECRET=${{secrets.CEQ_AZURE_SANDBOX2_TF_ARM_CLIENT_SECRET}}" >> $GITHUB_ENV
              echo "ARM_SUBSCRIPTION_ID=${{secrets.CEQ_AZURE_SANDBOX2_TF_ARM_SUBS_ID}}" >> $GITHUB_ENV
              echo "ARM_TENANT_ID=${{secrets.CEQ_AZURE_SANDBOX2_TF_ARM_TENANT_ID}}" >> $GITHUB_ENV
              echo "TFSTATE_RG=cloudeq" >> $GITHUB_ENV
              echo "TFSTATE_STORAGE_ACCOUNT=ceqstoragecd02" >> $GITHUB_ENV
              echo "TFSTATE_CONTAINER=tfstate" >> $GITHUB_ENV
              echo "ENV=Sandbox-02" >> $GITHUB_ENV
          else
            echo "environment not supported"
            exit 1
          fi

      # Checkout the repository to the GitHub Actions runner
      - name: Run Azure PowerShell to Login Azure
        uses: azure/powershell@v1
        with:
            inlineScript: |
              [string][ValidateNotNullOrEmpty()] $SecuredPassword= "${{env.ARM_CLIENT_SECRET}}"
              $SecuredPassword1 = ConvertTo-SecureString -String $SecuredPassword -AsPlainText -Force
              $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList '${{env.ARM_CLIENT_ID}}', $SecuredPassword1
              Connect-AzAccount -ServicePrincipal -TenantId "${{env.ARM_TENANT_ID}}" -SubscriptionId "${{env.ARM_SUBSCRIPTION_ID}}" -Credential $Credential
            azPSVersion: "latest"

      - name: Download Azure Dependencies Modules
        uses  : azure/powershell@v1
        with:
          inlineScript: |
            Install-Module -Name Az.Compute -Force -AllowClobber
            Install-Module -Name Az.Storage -Force -AllowClobber
            Install-Module -Name Az.Network -Force -AllowClobber 
            Install-Module -Name Az.Resources -Force -AllowClobber
          azPSVersion: "latest"

      - name: Clear Var Cache Step
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $RgName = "${{ github.event.inputs.resource_group_name }}"
            $VmName = "${{ github.event.inputs.server_name }}"
    
            Write-output "Resource Group Name: $RgName"
            Write-output "Virtual Machine name: $VmName"

            try {
              $scriptType = "RunShellScript"
              $scriptPath = "./Scripts/run.sh"
              $val = @{
                servername = $VmName
              }
              Invoke-AzVmRunCommand -ResourceGroupName $RgName -VMName $VmName -CommandId $scriptType -ScriptPath $scriptPath -Parameter $val
            } catch {
              Write-Host "An error occurred: $($_.Exception.Message)"
            }

          azPSVersion: "latest"
